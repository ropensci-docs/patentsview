[{"path":"https://docs.ropensci.org/patentsview/articles/examples.html","id":"patents-endpoint","dir":"Articles","previous_headings":"","what":"Patents endpoint","title":"Examples","text":"patents cited 500 US patents? many distinct inventors represented highly-cited patents? geographically Microsoft inventors coming past 20 years?","code":"library(patentsview)  search_pv(query = qry_funs$gt(patent_num_cited_by_us_patents = 500)) #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  3 variables: #>   ..$ patent_id    : chr [1:25] \"3940844\" ... #>   ..$ patent_number: chr [1:25] \"3940844\" ... #>   ..$ patent_title : chr [1:25] \"Method of installing an insulating sleeve on\".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 7,915 # Setting subent_cnts = TRUE will give us the subentity counts. Since inventors  # are subentities for the patents endpoint, this means we will get their counts. search_pv(   query = qry_funs$gt(patent_num_cited_by_us_patents = 500),   fields = c(\"patent_number\", \"inventor_id\"),    subent_cnts = TRUE ) #> $data #> #### A list with a single data frame (with list column(s) inside) on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  2 variables: #>   ..$ patent_number: chr [1:25] \"3940844\" ... #>   ..$ inventors    :List of 25 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 7,915, total_inventor_count = 11,263 # Write the query query <- with_qfuns(   and(     gte(patent_date = \"2007-07-25\"), # Dates are in yyyy-mm-dd format      contains(assignee_organization = \"microsoft\")   ) )  # Create a field list inv_fields <- get_fields(endpoint = \"patents\", groups = \"inventors\") fields <- c(inv_fields, \"patent_number\")  # Pull the data pv_out <- search_pv(query, fields = fields, all_pages = TRUE)  # Unnest the inventor list column unnest_pv_data(pv_out$data, \"patent_number\") #> List of 2 #>  $ inventors:'data.frame':   144495 obs. of  24 variables: #>   ..$ patent_number                 : chr [1:144495] \"10001683\" ... #>   ..$ inventor_city                 : chr [1:144495] \"Mountain View\" ... #>   ..$ inventor_country              : chr [1:144495] \"US\" ... #>   ..$ inventor_county               : logi [1:144495] NA ... #>   ..$ inventor_county_fips          : chr [1:144495] \"6085\" ... #>   ..$ inventor_first_name           : chr [1:144495] \"Andriy\" ... #>   ..$ inventor_first_seen_date      : chr [1:144495] \"2014-04-22\" ... #>   ..$ inventor_id                   : chr [1:144495] \"fl:a_ln:pletenetskyy-1\" .. #>   ..$ inventor_last_name            : chr [1:144495] \"Pletenetskyy\" ... #>   ..$ inventor_last_seen_date       : chr [1:144495] \"2020-10-13\" ... #>   ..$ inventor_lastknown_city       : chr [1:144495] \"Mountain View\" ... #>   ..$ inventor_lastknown_country    : chr [1:144495] \"US\" ... #>   ..$ inventor_lastknown_latitude   : chr [1:144495] \"37.4139\" ... #>   ..$ inventor_lastknown_location_id: chr [1:144495] \"37.4139|-122.085\" ... #>   ..$ inventor_lastknown_longitude  : chr [1:144495] \"-122.085\" ... #>   ..$ inventor_lastknown_state      : chr [1:144495] \"CA\" ... #>   ..$ inventor_latitude             : chr [1:144495] \"37.4139\" ... #>   ..$ inventor_location_id          : chr [1:144495] \"37.4139|-122.085\" ... #>   ..$ inventor_longitude            : chr [1:144495] \"-122.085\" ... #>   ..$ inventor_sequence             : chr [1:144495] \"0\" ... #>   ..$ inventor_state                : chr [1:144495] \"CA\" ... #>   ..$ inventor_state_fips           : chr [1:144495] \"06\" ... #>   ..$ inventor_total_num_patents    : chr [1:144495] \"15\" ... #>   ..$ inventor_key_id               : chr [1:144495] \"489570\" ... #>  $ patents  :'data.frame':   39051 obs. of  1 variable: #>   ..$ patent_number: chr [1:39051] \"10001683\" ..."},{"path":"https://docs.ropensci.org/patentsview/articles/examples.html","id":"inventors-endpoint","dir":"Articles","previous_headings":"","what":"Inventors endpoint","title":"Examples","text":"inventors Chicago, IL listed location least one patent.1","code":"search_pv(   query = '{\"_and\":[{\"location_city\":\"Chicago\"},{\"location_state\":\"IL\"}]}',   endpoint = \"inventors\" ) #> $data #> #### A list with a single data frame on an inventor level: #>  #> List of 1 #>  $ inventors:'data.frame':   25 obs. of  3 variables: #>   ..$ inventor_id        : chr [1:25] \"fl:b_ln:gunderson-2\" ... #>   ..$ inventor_first_name: chr [1:25] \"Bjorn\" ... #>   ..$ inventor_last_name : chr [1:25] \"Gunderson\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_inventor_count = 16,360"},{"path":"https://docs.ropensci.org/patentsview/articles/examples.html","id":"assignees-endpoint","dir":"Articles","previous_headings":"","what":"Assignees endpoint","title":"Examples","text":"assignees interest beer?","code":"search_pv(   query = qry_funs$text_phrase(patent_title = \"beer\"),    endpoint = \"assignees\" ) #> $data #> #### A list with a single data frame on an assignee level: #>  #> List of 1 #>  $ assignees:'data.frame':   25 obs. of  4 variables: #>   ..$ assignee_id          : chr [1:25] \"6cdc5a48-9dd2-4d1c-8c35-27eaef76ffd1\".. #>   ..$ assignee_first_name  : logi [1:25] NA ... #>   ..$ assignee_last_name   : logi [1:25] NA ... #>   ..$ assignee_organization: chr [1:25] \"Rohm Co., Ltd.\" ... #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_assignee_count = 225"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"a-basic-example","dir":"Articles","previous_headings":"","what":"A basic example","title":"Getting started","text":"Let’s start basic example use package’s primary function, search_pv(): call search_pv() sends query patents endpoint (default). API 7 different endpoints, corresponding 7 different entity types (assignees, CPC subsections, inventors, locations, NBER subcategories, patents, USPC main classes).1 choice endpoint determines entity query applied , well structure data returned (“7 endpoints 7 entities section”). now, let’s turn attention query parameter.","code":"library(patentsview)  search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}',   endpoint = \"patents\" ) #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  3 variables: #>   ..$ patent_id    : chr [1:25] \"10000000\" ... #>   ..$ patent_number: chr [1:25] \"10000000\" ... #>   ..$ patent_title : chr [1:25] \"Coherent LADAR using intra-pixel quadrature \".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 100,000"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"writing-queries","dir":"Articles","previous_headings":"","what":"Writing queries","title":"Getting started","text":"PatentsView query syntax documented query language page.2 However, can difficult get query right ’re writing hand (.e., just writing query string like '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}', example shown ). patentsview package comes simple domain specific language (DSL) make writing queries breeze. recommend using functions DSL basic queries, especially ’re encountering errors don’t understand . get feel works, let’s rewrite query shown using one functions DSL, qry_funs$gte(): complex queries also possible: Check writing queries vignette details using DSL.","code":"qry_funs$gte(patent_date = \"2007-01-01\") #> {\"_gte\":{\"patent_date\":\"2007-01-01\"}} with_qfuns(   and(     gte(patent_date = \"2007-01-01\"),     text_phrase(patent_abstract = c(\"computer program\", \"dog leash\"))   ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_or\":[{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_text_phrase\":{\"patent_abstract\":\"dog leash\"}}]}]}"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"fields","dir":"Articles","previous_headings":"","what":"Fields","title":"Getting started","text":"endpoint different set queryable retrievable fields. Queryable fields can include query (e.g., patent_date shown first example). Retrievable fields can get data (.e., fields returned search_pv()). first example, didn’t specify fields wanted retrieve given default set. can specify fields want using fields argument: list retrievable fields given endpoint, use get_fields(): can also visit endpoint’s online documentation page see list queryable retrievable fields (e.g., see inventor field list table). Note “Query” column table, indicates whether field queryable retrievable (Query = Y), just retrievable (Query = N). field tables endpoints can found fieldsdf data frame, can load using data(\"fieldsdf\") View(patentsview::fieldsdf). important note: default, PatentsView uses disambiguted versions assignees, inventors, locations, instead raw data. example, let’s say search inventors whose first name “john.” PatentsView API going return inventors preferred first name (per disambiguation results) john, may necessarily raw first name. getting back inventors whose first name appears patent , say, “jonathan,” “johnn,” even “john jay.” can search raw inventor names instead preferred names using fields starting “raw” query (e.g., rawinventor_first_name). assignee location raw data fields currently offered API. see methods behind disambiguation process, see PatentsView Inventor Disambiguation Technical Workshop website.","code":"search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}',   fields = c(\"patent_number\", \"patent_title\") ) #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  2 variables: #>   ..$ patent_number: chr [1:25] \"10000000\" ... #>   ..$ patent_title : chr [1:25] \"Coherent LADAR using intra-pixel quadrature \".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 100,000 retrvble_flds <- get_fields(endpoint = \"patents\") head(retrvble_flds) #> [1] \"appcit_app_number\" \"appcit_category\"   \"appcit_date\"       #> [4] \"appcit_kind\"       \"appcit_sequence\"   \"app_country\""},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"paginated-responses","dir":"Articles","previous_headings":"","what":"Paginated responses","title":"Getting started","text":"default, search_pv() returns 25 records per page gives first page results. suggest sticking defaults ’re figuring details request, query want use fields want returned. items finalized, can use per_page argument download 10,000 records per page. can also choose page results want page argument: can download pages output one call setting all_pages = TRUE. set per_page equal 10,000 loop pages output (downloading 10 pages, 100,000 records total):","code":"search_pv(   query = qry_funs$eq(inventor_last_name = \"chambers\"),   page = 2, per_page = 150 # gets records 150 - 300 )  #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 150 obs. of  3 variables: #>   ..$ patent_id    : chr [1:150] \"10577927\" ... #>   ..$ patent_number: chr [1:150] \"10577927\" ... #>   ..$ patent_title : chr [1:150] \"Mud pulse telemetry tool comprising a low t\".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 2,208 search_pv(   query = qry_funs$eq(inventor_last_name = \"chambers\"),   all_pages = TRUE ) #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 2208 obs. of  3 variables: #>   ..$ patent_id    : chr [1:2208] \"10000988\" ... #>   ..$ patent_number: chr [1:2208] \"10000988\" ... #>   ..$ patent_title : chr [1:2208] \"Seal assemblies in subsea rotating control\".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 2,208"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"entity-counts","dir":"Articles","previous_headings":"","what":"Entity counts","title":"Getting started","text":"last two calls search_pv() gave value total_patent_count, even though got lot data second call. entity counts returned API refer number distinct entities across downloadable pages output, just page returned. Downloadable pages output important phrase , API limits us 100,000 records per query. example, got total_patent_count = 100,000 searched patents published 2007, even though way 100,000 patents. See FAQs details overcome 100,000 record restriction.","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"endpoints-for-7-entities","dir":"Articles","previous_headings":"","what":"7 endpoints for 7 entities","title":"Getting started","text":"can get similar data 7 endpoints. example, following two calls differ endpoint chosen: choice endpoint determines two things: entity query applied . first call shown used patents endpoint, API searched patents least one inventor listed last name “chambers.” second call used assignees endpoint, API searched assignees assigned least one patent inventor listed last name “chambers.” structure data frame returned. first call returned data frame patent level, meaning row corresponded different patent. Fields patent level (e.g., inventor_last_name) returned list columns named entity associated field (e.g., inventors entity).3 Meanwhile, second call gave us data frame assignee level (one row assignee) used assignees endpoint. time want use patents endpoint. Note can still effectively filter fields patent-level using patents endpoint (e.g., can filter assignee name CPC category). patents relatively low-level entities. higher level entities like assignees, filter field assignee-level (e.g., inventor name), API return data assignee least one inventor whose name matches search, probably want.","code":"query <- qry_funs$eq(inventor_last_name = \"chambers\") fields <- c(\"patent_number\", \"inventor_last_name\", \"assignee_organization\")  # Here we are using the patents endpoint: search_pv(query, endpoint = \"patents\", fields = fields) #> $data #> #### A list with a single data frame (with list column(s) inside) on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  3 variables: #>   ..$ patent_number: chr [1:25] \"10000988\" ... #>   ..$ inventors    :List of 25 #>   ..$ assignees    :List of 25 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 2,208 # While here we are using the assignees endpoint: search_pv(query, endpoint = \"assignees\", fields = fields) #> $data #> #### A list with a single data frame (with list column(s) inside) on an assignee level: #>  #> List of 1 #>  $ assignees:'data.frame':   25 obs. of  3 variables: #>   ..$ assignee_organization: chr [1:25] \"XEROX CORPORATION\" ... #>   ..$ patents              :List of 25 #>   ..$ inventors            :List of 25 #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_assignee_count = 531"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"casting-fields","dir":"Articles","previous_headings":"","what":"Casting fields","title":"Getting started","text":"API always returns data fields strings, even better stored using different data type (e.g., numeric). can cast fields preferred R types using cast_pv_data():","code":"res <- search_pv(   query = \"{\\\"patent_number\\\":\\\"5116621\\\"}\",    fields = c(\"patent_date\", \"patent_title\", \"patent_year\") )  # Right now all of the fields are stored as character vectors: res #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 1 obs. of  3 variables: #>   ..$ patent_date : chr \"1992-05-26\" #>   ..$ patent_title: chr \"Anti-inflammatory analgesic patch\" #>   ..$ patent_year : chr \"1992\" #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 1  # Use more appropriate data types: cast_pv_data(res$data) #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 1 obs. of  3 variables: #>   ..$ patent_date : Date[1:1], format: \"1992-05-26\" #>   ..$ patent_title: chr \"Anti-inflammatory analgesic patch\" #>   ..$ patent_year : int 1992"},{"path":[]},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"im-sure-my-query-is-well-formatted-and-correct-but-i-keep-getting-an-error--whats-the-deal","dir":"Articles","previous_headings":"FAQs","what":"I’m sure my query is well formatted and correct but I keep getting an error. What’s the deal?","title":"Getting started","text":"API query syntax guidelines cover API’s behavior. Specifically, several things documented API’s webpage. writing queries vignette details .","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"does-the-api-have-any-rate-limitingthrottling-controls","dir":"Articles","previous_headings":"FAQs","what":"Does the API have any rate limiting/throttling controls?","title":"Getting started","text":"moment.","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"how-do-i-download-more-than-100000-records","dir":"Articles","previous_headings":"FAQs","what":"How do I download more than 100,000 records?","title":"Getting started","text":"best bet split query pieces based dates, concatenate results together. example, query return 100,000 records patents endpoint: download records associated query, split two pieces make two calls search_pv():","code":"query <- with_qfuns(text_any(patent_abstract = 'tool animal')) query_1a <- with_qfuns(   and(     text_any(patent_abstract = 'tool animal'),     lte(patent_date = \"2010-01-01\")   ) )  query_1b <- with_qfuns(   and(     text_any(patent_abstract = 'tool animal'),     gt(patent_date = \"2010-01-01\")   ) )"},{"path":"https://docs.ropensci.org/patentsview/articles/getting-started.html","id":"how-do-i-access-the-data-frames-inside-the-list-columns-returned-by-search_pv","dir":"Articles","previous_headings":"FAQs","what":"How do I access the data frames inside the list columns returned by search_pv()?","title":"Getting started","text":"Let’s consider following data, assignees primary entity applications “government interest statements” secondary entities (also referred subentities): res$data vector columns fields belong primary entity (e.g., res$data$assignees$assignee_id) list columns fields belong secondary entity (e.g., res$data$assignees$applications). two good ways pull data frames nested inside list columns: Use tidyr::unnest. (probably easier choice two). Use patentsview::unnest_pv_data. unnest_pv_data() creates series data frames (one entity level) like tables relational database. provide data returned search_pv() field can act unique identifier primary entities: Now left series flat data frames instead single data frame data frames nested inside . flat data frames can joined together needed via primary key (assignee_id).","code":"# Create field list asgn_flds <- c(\"assignee_id\", \"assignee_organization\") subent_flds <- get_fields(\"assignees\", c(\"applications\", \"gov_interests\")) fields <- c(asgn_flds, subent_flds)  # Pull data res <- search_pv(   query = qry_funs$contains(inventor_last_name = \"smith\"),    endpoint = \"assignees\",    fields = fields ) res$data #> #### A list with a single data frame (with list column(s) inside) on an assignee level: #>  #> List of 1 #>  $ assignees:'data.frame':   25 obs. of  4 variables: #>   ..$ assignee_id          : chr [1:25] \"e9449f65-8659-4611-a16d-18f65af5b3b6\".. #>   ..$ assignee_organization: chr [1:25] \"U.S. Philips Corporation\" ... #>   ..$ applications         :List of 25 #>   ..$ gov_interests        :List of 25 library(tidyr) #>  #> Attaching package: 'tidyr' #> The following object is masked from 'package:magrittr': #>  #>     extract  # Get assignee/application data: res$data$assignees %>%    unnest(applications) %>%   head() #> # A tibble: 6 x 8 #>   assignee_id   assignee_organi… app_country app_date app_number app_type app_id #>   <chr>         <chr>            <chr>       <chr>    <chr>      <chr>    <chr>  #> 1 e9449f65-865… U.S. Philips Co… US          1974-01… 05431439   05       05/43… #> 2 e9449f65-865… U.S. Philips Co… US          1975-07… 05600148   05       05/60… #> 3 e9449f65-865… U.S. Philips Co… US          1976-01… 05648308   05       05/64… #> 4 e9449f65-865… U.S. Philips Co… US          1975-09… 05618031   05       05/61… #> 5 e9449f65-865… U.S. Philips Co… US          1979-02… 06013951   06       06/01… #> 6 e9449f65-865… U.S. Philips Co… US          1979-01… 06002418   06       06/00… #> # … with 1 more variable: gov_interests <list>  # Get assignee/gov_interest data: res$data$assignees %>%    unnest(gov_interests) %>%   head() #> # A tibble: 6 x 10 #>   assignee_id   assignee_organizati… applications govint_contract… govint_org_id #>   <chr>         <chr>                <list>       <chr>            <chr>         #> 1 e9449f65-865… U.S. Philips Corpor… <df [19 × 5… <NA>             <NA>          #> 2 bbbe8bb0-7e4… XEROX CORPORATION    <df [510 × … <NA>             <NA>          #> 3 bbbe8bb0-7e4… XEROX CORPORATION    <df [510 × … ECD-8721551      31            #> 4 bbbe8bb0-7e4… XEROX CORPORATION    <df [510 × … 70NANBOH3033     44            #> 5 bbbe8bb0-7e4… XEROX CORPORATION    <df [510 × … 70NANBOH3033     44            #> 6 66fc4d3d-4a3… Commonwealth Scient… <df [1 × 5]> <NA>             <NA>          #> # … with 5 more variables: govint_org_level_one <chr>, #> #   govint_org_level_two <chr>, govint_org_level_three <lgl>, #> #   govint_org_name <chr>, govint_raw_statement <chr> unnest_pv_data(data = res$data, pk = \"assignee_id\") #> List of 3 #>  $ applications :'data.frame':   1951 obs. of  6 variables: #>   ..$ assignee_id: chr [1:1951] \"e9449f65-8659-4611-a16d-18f65af5b3b6\" ... #>   ..$ app_country: chr [1:1951] \"US\" ... #>   ..$ app_date   : chr [1:1951] \"1974-01-07\" ... #>   ..$ app_number : chr [1:1951] \"05431439\" ... #>   ..$ app_type   : chr [1:1951] \"05\" ... #>   ..$ app_id     : chr [1:1951] \"05/431439\" ... #>  $ gov_interests:'data.frame':   91 obs. of  8 variables: #>   ..$ assignee_id                 : chr [1:91] \"e9449f65-8659-4611-a16d-18f65\".. #>   ..$ govint_contract_award_number: chr [1:91] NA ... #>   ..$ govint_org_id               : chr [1:91] NA ... #>   ..$ govint_org_level_one        : chr [1:91] NA ... #>   ..$ govint_org_level_two        : chr [1:91] NA ... #>   ..$ govint_org_level_three      : logi [1:91] NA ... #>   ..$ govint_org_name             : chr [1:91] NA ... #>   ..$ govint_raw_statement        : chr [1:91] NA ... #>  $ assignees    :'data.frame':   25 obs. of  2 variables: #>   ..$ assignee_id          : chr [1:25] \"e9449f65-8659-4611-a16d-18f65af5b3b6\".. #>   ..$ assignee_organization: chr [1:25] \"U.S. Philips Corporation\" ..."},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"three-ways-to-write-the-same-query","dir":"Articles","previous_headings":"","what":"Three ways to write the same query","title":"Writing queries","text":"Let’s say want find patents published last 10 years word “dog” titles abstracts, whose assignees located either US Canada. three ways write query: Use string: Use list: Use patentsview domain specific language (DSL):","code":"query_v_1 <-   '{\"_and\":[           {\"_gte\":{\"patent_date\":\"2007-03-01\"}},           {\"_or\":[             {\"_text_all\":{\"patent_title\":\"dog\"}},             {\"_text_all\":{\"patent_abstract\":\"dog\"}}           ]},           {\"_or\":[             {\"_eq\":{\"assingee_country\":\"US\"}},             {\"_eq\":{\"assingee_country\":\"CA\"}}           ]}   ]}' query_v_2 <-    list(\"_and\" =         list(           list(\"_gte\" = list(patent_date = \"2007-03-01\")),           list(\"_or\" =                   list(                    list(\"_text_all\" = list(patent_title = \"dog\")),                    list(\"_text_all\" = list(patent_abstract = \"dog\"))                    )                ),           list(\"_or\" =                   list(                    list(\"_eq\" = list(assingee_country = \"US\")),                    list(\"_eq\" = list(assingee_country = \"CA\"))                    )                )       )   ) library(patentsview)  query_v_3 <-    with_qfuns(     and(       gte(patent_date = \"2007-03-01\"),       or(         text_all(patent_title = \"dog\"),         text_all(patent_abstract = \"dog\")       ),       eq(assingee_country = c(\"US\", \"CA\"))     )   )"},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"why-use-the-dsl","dir":"Articles","previous_headings":"","what":"Why use the DSL?","title":"Writing queries","text":"can see three versions query shown equivalent: …ever want use method 3 methods 1 2? two main reasons:","code":"jsonlite::minify(query_v_1) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_text_all\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_eq\":{\"assingee_country\":\"US\"}},{\"_eq\":{\"assingee_country\":\"CA\"}}]}]} jsonlite::toJSON(query_v_2, auto_unbox = TRUE) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_text_all\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_eq\":{\"assingee_country\":\"US\"}},{\"_eq\":{\"assingee_country\":\"CA\"}}]}]} jsonlite::toJSON(query_v_3, auto_unbox = TRUE) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-03-01\"}},{\"_or\":[{\"_text_all\":{\"patent_title\":\"dog\"}},{\"_text_all\":{\"patent_abstract\":\"dog\"}}]},{\"_or\":[{\"_eq\":{\"assingee_country\":\"US\"}},{\"_eq\":{\"assingee_country\":\"CA\"}}]}]}"},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"query-validation","dir":"Articles","previous_headings":"Why use the DSL?","what":"1. Query validation","title":"Writing queries","text":"search_pv() check query errors use methods 2 3. case method 1, rely API’s error messages guidance query invalid. search_pv() checks queries following: fields included query queryable endpoint (.e., field can used user query). example, make sure assingee_country can used query argument sent query patents endpoint. fields query compatible comparison operators used. example, confirm text_all operator used field whose type “full text” (patent_title ). supplied correct value type field (e.g., patent_date character, integer).","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"concise-easy-to-use-syntax-for-complex-queries","dir":"Articles","previous_headings":"Why use the DSL?","what":"2. Concise, easy to use syntax for complex queries","title":"Writing queries","text":"Methods 1 3 shorter method 2, making quicker. ’s also lot easier get JSON syntax correct using method 3 compared method 1, don’t write JSON using DSL…important API fairly picky query syntax, ’s trivial get correct. example, API throw error use box JSON absolutely necessary, even query still valid JSON (e.g., query = {\"_gte\":{\"patent_date\":[\"2007-03-01\"]}} throw error). Compared method 1, method 3 correctly “” together values put vector. example, query shown , vector two values given assingee_country (c(\"US\", \"CA\")). safely converted single “equals” statement third element query (eq(assingee_country = c(\"US\", \"CA\"))) two separate equals statements got ’d together.1","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"basics-of-the-language","dir":"Articles","previous_headings":"","what":"Basics of the language","title":"Writing queries","text":"functions make DSL found qry_funs list (e.g., qry_funs$eq()). can evaluate code context list using function with_qfuns() (see ?with_qfuns() example demonstrates with_qfuns() can save typing). three types functions qry_funs: Comparison operator functions (eq, neq, gt, gte, lt, lte, begins, contains, text_all, text_any, text_phrase). functions used compare field value. example, using “less equal ” function (lte), can filter patents published date (e.g., query = qry_funs$lte(patent_date = \"2001-01-05\")). See “comparison operators” section API’s query language page description 11 comparison operators. One important thing keep mind certain comparison operators work certain data types. example, can’t use begins function patent_abstract patent_abstract data type “full text” begins works fields data type “string.” Array functions (). can use functions logically combine calls comparison operators. example, can require patent date less equal 2001-01-05 inventor’s last name “Ihaka” (query = with_qfuns((lte(patent_date = \"2001-01-05\"), eq(inventor_last_name = \"Ihaka\")))). function (). function negates comparison. example, search patents don’t word “hi” titles like : qry_funs$(qry_funs$text_phrase(patent_title = \"hi\")).","code":""},{"path":"https://docs.ropensci.org/patentsview/articles/writing-queries.html","id":"query-examples","dir":"Articles","previous_headings":"","what":"Query examples","title":"Writing queries","text":"following queries intended patents endpoint Patents linked assignee 10 fewer distinct (disambiguated) inventors: Patents assigned “CPC subsection”2 G12 (physics instruments): Patents : inventor listed whose first name contains “joh” abstract containing either phrase “dog bark” “cat meow” abstract doesn’t phrase “dog chain” : Patents : inventor listed whose last name “Smith” “cotton gin” title inventor listed whose last name “Hopper” “COBOL” title","code":"qry_funs$lte(assignee_total_num_inventors = 10) #> {\"_lte\":{\"assignee_total_num_inventors\":10}} qry_funs$eq(cpc_subsection_id = \"G12\") #> {\"_eq\":{\"cpc_subsection_id\":\"G12\"}} with_qfuns(   and(     contains(rawinventor_first_name = \"joh\"),     text_phrase(patent_abstract = c(\"dog bark\", \"cat meow\")),     not(       text_phrase(patent_abstract = c(\"dog chain\"))     )   ) ) #> {\"_and\":[{\"_contains\":{\"rawinventor_first_name\":\"joh\"}},{\"_or\":[{\"_text_phrase\":{\"patent_abstract\":\"dog bark\"}},{\"_text_phrase\":{\"patent_abstract\":\"cat meow\"}}]},{\"_not\":{\"_text_phrase\":{\"patent_abstract\":\"dog chain\"}}}]} with_qfuns(   or(     and(       eq(inventor_last_name = \"smith\"),       text_phrase(patent_title = \"cotton gin\")     ),     and(       eq(inventor_last_name = \"hopper\"),       text_phrase(patent_title = \"COBOL\")     )   ) ) #> {\"_or\":[{\"_and\":[{\"_eq\":{\"inventor_last_name\":\"smith\"}},{\"_text_phrase\":{\"patent_title\":\"cotton gin\"}}]},{\"_and\":[{\"_eq\":{\"inventor_last_name\":\"hopper\"}},{\"_text_phrase\":{\"patent_title\":\"COBOL\"}}]}]}"},{"path":"https://docs.ropensci.org/patentsview/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Baker. Author, maintainer. Russ Allen. Author.","code":""},{"path":"https://docs.ropensci.org/patentsview/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker C, Allen R (2024). patentsview: R Client 'PatentsView' API. R package version 0.3.0, https://docs.ropensci.org/patentsview/index.html.","code":"@Manual{,   title = {patentsview: An R Client to the 'PatentsView' API},   author = {Christopher Baker and Russ Allen},   year = {2024},   note = {R package version 0.3.0},   url = {https://docs.ropensci.org/patentsview/index.html}, }"},{"path":"https://docs.ropensci.org/patentsview/index.html","id":"patentsview","dir":"","previous_headings":"","what":"An R Client to the PatentsView API","title":"An R Client to the PatentsView API","text":"R client PatentsView API","code":""},{"path":"https://docs.ropensci.org/patentsview/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Client to the PatentsView API","text":"can get stable version CRAN: development version GitHub:","code":"install.packages(\"patentsview\") if (!\"devtools\" %in% rownames(installed.packages()))    install.packages(\"devtools\")  devtools::install_github(\"ropensci/patentsview\")"},{"path":"https://docs.ropensci.org/patentsview/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"An R Client to the PatentsView API","text":"PatentsView API provides interface disambiguated version USPTO. patentsview R package provides one main function, search_pv(), make easy interact API:","code":"library(patentsview)  search_pv(query = '{\"_gte\":{\"patent_date\":\"2007-01-01\"}}') #> $data #> #### A list with a single data frame on a patent level: #>  #> List of 1 #>  $ patents:'data.frame': 25 obs. of  3 variables: #>   ..$ patent_id    : chr [1:25] \"10000000\" ... #>   ..$ patent_number: chr [1:25] \"10000000\" ... #>   ..$ patent_title : chr [1:25] \"Coherent LADAR using intra-pixel quadrature \".. #>  #> $query_results #> #### Distinct entity counts across all downloadable pages of output: #>  #> total_patent_count = 100,000"},{"path":"https://docs.ropensci.org/patentsview/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"An R Client to the PatentsView API","text":"Head package’s webpage info, including: getting started vignette first-time users. package also introduced rOpenSci blog post. -depth tutorial writing queries list basic examples Two examples data applications (e.g., brief analysis top assignees field databases)","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/cast_pv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast PatentsView data — cast_pv_data","title":"Cast PatentsView data — cast_pv_data","text":"cast data fields returned search_pv appropriate data types (e.g., date, numeric, etc.).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/cast_pv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast PatentsView data — cast_pv_data","text":"","code":"cast_pv_data(data)"},{"path":"https://docs.ropensci.org/patentsview/reference/cast_pv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast PatentsView data — cast_pv_data","text":"data data returned search_pv. first element three-element result object got back search_pv. list length 1, one data frame inside . See examples.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/cast_pv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast PatentsView data — cast_pv_data","text":"type object passed cast_pv_data.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/cast_pv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast PatentsView data — cast_pv_data","text":"","code":"if (FALSE) {  fields <- c(\"patent_date\", \"patent_title\", \"patent_year\") res <- search_pv(query = \"{\\\"patent_number\\\":\\\"5116621\\\"}\", fields = fields) cast_pv_data(data = res$data) }"},{"path":"https://docs.ropensci.org/patentsview/reference/fieldsdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Fields data frame — fieldsdf","title":"Fields data frame — fieldsdf","text":"data frame containing names retrievable fields endpoints. can find data API's online documentation endpoint well (e.g., patents endpoint field list table).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/fieldsdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fields data frame — fieldsdf","text":"","code":"fieldsdf"},{"path":"https://docs.ropensci.org/patentsview/reference/fieldsdf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fields data frame — fieldsdf","text":"data frame following columns: endpoint endpoint field record field complete name field, including parent group applicable data_type field's input data type group group field belongs common_name field name without parent group structure","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get endpoints — get_endpoints","title":"Get endpoints — get_endpoints","text":"function reminds user possible PatentsView API endpoints .","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get endpoints — get_endpoints","text":"","code":"get_endpoints()"},{"path":"https://docs.ropensci.org/patentsview/reference/get_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get endpoints — get_endpoints","text":"character vector names endpoint.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of retrievable fields — get_fields","title":"Get list of retrievable fields — get_fields","text":"function returns vector fields can retrieve given API endpoint (.e., fields can pass fields argument search_pv). can limit fields cover certain entity group(s) well (recommended, given large number possible fields endpoint).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of retrievable fields — get_fields","text":"","code":"get_fields(endpoint, groups = NULL)"},{"path":"https://docs.ropensci.org/patentsview/reference/get_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of retrievable fields — get_fields","text":"endpoint API endpoint whose field list want get. See get_endpoints list 7 endpoints. groups character vector giving group(s) whose fields want returned. value NULL indicates want endpoint's fields (.e., filter field list based group membership). See field tables located online see groups can specify given endpoint (e.g., patents endpoint table), use fieldsdf table (e.g., unique(fieldsdf[fieldsdf$endpoint == \"patents\", \"group\"])).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of retrievable fields — get_fields","text":"character vector field names.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of retrievable fields — get_fields","text":"","code":"# Get all assignee-level fields for the patents endpoint: fields <- get_fields(endpoint = \"patents\", groups = \"assignees_at_grant\")  # ...Then pass to search_pv: if (FALSE) {  search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}',   fields = fields ) } # Get all patent and assignee-level fields for the patents endpoint: fields <- get_fields(endpoint = \"patents\", groups = c(\"assignees_at_grant\", \"patents\"))  if (FALSE) { # ...Then pass to search_pv: search_pv(   query = '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}',   fields = fields ) }"},{"path":"https://docs.ropensci.org/patentsview/reference/get_ok_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OK primary key — get_ok_pk","title":"Get OK primary key — get_ok_pk","text":"function suggests value use pk argument unnest_pv_data, based endpoint searched. return potential unique identifier given entity (.e., given endpoint). example, return \"patent_number\" endpoint = \"patents\".","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_ok_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OK primary key — get_ok_pk","text":"","code":"get_ok_pk(endpoint)"},{"path":"https://docs.ropensci.org/patentsview/reference/get_ok_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OK primary key — get_ok_pk","text":"endpoint endpoint like know potential primary key .","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_ok_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OK primary key — get_ok_pk","text":"name primary key (pk) pass unnest_pv_data.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/get_ok_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OK primary key — get_ok_pk","text":"","code":"get_ok_pk(endpoint = \"inventors\") # Returns \"inventor_id\" #> [1] \"inventor_id\" get_ok_pk(endpoint = \"cpc_subsections\") # Returns \"cpc_subsection_id\" #> [1] \"cpc_subsection_id\""},{"path":"https://docs.ropensci.org/patentsview/reference/patentsview-package.html","id":null,"dir":"Reference","previous_headings":"","what":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","title":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","text":"Provides functions simplify 'PatentsView' API (<https://patentsview.org/apis/purpose>) query language, send GET POST requests API's seven endpoints, parse data comes back.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/patentsview/reference/patentsview-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"patentsview: An R Client to the 'PatentsView' API — patentsview-package","text":"Maintainer: Christopher Baker chriscrewbaker@gmail.com Authors: Russ Allen rrjallen@yahoo.com","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"List of query functions — qry_funs","title":"List of query functions — qry_funs","text":"list functions make easy write PatentsView queries. See details section list 14 functions, well writing queries vignette details.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of query functions — qry_funs","text":"","code":"qry_funs"},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of query functions — qry_funs","text":"object class list length 14.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of query functions — qry_funs","text":"object class pv_query. basically just simple list print method attached .","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of query functions — qry_funs","text":"1. Comparison operator functions 6 comparison operator functions work fields type integer, float, date, string: eq - Equal neq - equal gt - Greater gte - Greater equal lt - Less lte - Less equal 2 comparison operator functions work fields type string: begins - string begins value string contains - string contains value string 3 comparison operator functions work fields type fulltext: text_all - text contains words value string text_any - text contains words value string text_phrase - text contains exact phrase value string 2. Array functions 2 array functions: - members array must true - one member array must true 3. Negation function 1 negation function: - comparison true","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/qry_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of query functions — qry_funs","text":"","code":"qry_funs$eq(patent_date = \"2001-01-01\") #> {\"_eq\":{\"patent_date\":\"2001-01-01\"}}  qry_funs$not(qry_funs$eq(patent_date = \"2001-01-01\")) #> {\"_not\":{\"_eq\":{\"patent_date\":\"2001-01-01\"}}}"},{"path":"https://docs.ropensci.org/patentsview/reference/retrieve_linked_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Linked Data — retrieve_linked_data","title":"Get Linked Data — retrieve_linked_data","text":"endpoints now return HATEOAS style links get data. E.g., inventors endpoint may return link : \"https://search.patentsview.org/api/v1/inventor/252373/\"","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/retrieve_linked_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Linked Data — retrieve_linked_data","text":"","code":"retrieve_linked_data(url, api_key = Sys.getenv(\"PATENTSVIEW_API_KEY\"), ...)"},{"path":"https://docs.ropensci.org/patentsview/reference/retrieve_linked_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Linked Data — retrieve_linked_data","text":"url link returned API previous call. api_key API key. See  info creating key. ... Arguments passed along httr's GET POST function.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/retrieve_linked_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Linked Data — retrieve_linked_data","text":"list following three elements: data list one element - named data frame containing data returned server. row data frame corresponds single value primary entity. example, search assignees endpoint, data frame assignee-level, row corresponds single assignee. Fields assignee-level returned list columns. query_results Entity counts across pages output (just page returned ). request Details HTTP request sent server. set all_pages = TRUE, get sample request. words, given multiple requests multiple calls made server (one page results).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/retrieve_linked_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Linked Data — retrieve_linked_data","text":"","code":"if (FALSE) {  retrieve_linked_data(   \"https://search.patentsview.org/api/v1/cpc_subgroup/G01S7:4811/\"  ) }"},{"path":"https://docs.ropensci.org/patentsview/reference/search_pv.html","id":null,"dir":"Reference","previous_headings":"","what":"Search PatentsView — search_pv","title":"Search PatentsView — search_pv","text":"function makes HTTP request PatentsView API data matching user's query.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/search_pv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search PatentsView — search_pv","text":"","code":"search_pv(   query,   fields = NULL,   endpoint = \"patents\",   subent_cnts = FALSE,   mtchd_subent_only = lifecycle::deprecated(),   page = 1,   per_page = 1000,   all_pages = FALSE,   sort = NULL,   method = \"GET\",   error_browser = NULL,   api_key = Sys.getenv(\"PATENTSVIEW_API_KEY\"),   ... )"},{"path":"https://docs.ropensci.org/patentsview/reference/search_pv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search PatentsView — search_pv","text":"query query API use filter records. query can come one following forms: character string valid JSON.  E.g., '{\"_gte\":{\"patent_date\":\"2007-01-04\"}}' list converted JSON search_pv.  E.g., list(\"_gte\" = list(\"patent_date\" = \"2007-01-04\")) object class pv_query, create calling one functions found qry_funs list...See writing queries vignette details. E.g., qry_funs$gte(patent_date = \"2007-01-04\") fields character vector fields want returned . value NULL indicates default fields returned. Acceptable fields given endpoint can found API's online documentation (e.g., check field list patents endpoint) viewing fieldsdf data frame (View(fieldsdf)). can also use get_fields list fields available given endpoint. endpoint web service resource wish search. Use get_endpoints() list available endpoints. subent_cnts Non-matched subentities always returned new version API mtchd_subent_only always FALSE new version API. page page number results returned. per_page number records returned per page. value can high 1,000 (e.g., per_page = 1000). all_pages want download possible pages output? all_pages = TRUE, values page per_page ignored. sort named character vector name indicates field sort value indicates direction sorting (direction either \"asc\" \"desc\"). example, sort = c(\"patent_number\" =  \"asc\") sort = c(\"patent_number\" = \"asc\", \"patent_date\" =  \"desc\"). sort = NULL (default) means sort results. must include fields wish sort fields. method HTTP method want use send request. Possible values include \"GET\" \"POST\". Use POST method query long (say, 2,000 characters length). error_browser  api_key API key. See  info creating key. ... Arguments passed along httr's GET POST function.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/search_pv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search PatentsView — search_pv","text":"list following three elements: data list one element - named data frame containing data returned server. row data frame corresponds single value primary entity. example, search assignees endpoint, data frame assignee-level, row corresponds single assignee. Fields assignee-level returned list columns. query_results Entity counts across pages output (just page returned ). request Details HTTP request sent server. set all_pages = TRUE, get sample request. words, given multiple requests multiple calls made server (one page results).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/search_pv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search PatentsView — search_pv","text":"","code":"if (FALSE) {  search_pv(query = '{\"_gt\":{\"patent_year\":2010}}')  search_pv(   query = qry_funs$gt(patent_year = 2010),   fields = get_fields(\"patents\", c(\"patents\", \"assignees_at_grant\")) )  search_pv(   query = qry_funs$gt(patent_year = 2010),   method = \"POST\",   fields = \"patent_number\",   sort = c(\"patent_number\" = \"asc\") )  search_pv(   query = qry_funs$eq(name_last = \"crew\"),   endpoint = \"inventors\",   all_pages = TRUE )  search_pv(   query = qry_funs$contains(name_last = \"smith\"),   endpoint = \"assignees\" )  search_pv(   query = qry_funs$contains(inventors_at_grant.name_last = \"smith\"),   endpoint = \"patents\",   config = httr::timeout(40) ) }"},{"path":"https://docs.ropensci.org/patentsview/reference/unnest_pv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest PatentsView data — unnest_pv_data","title":"Unnest PatentsView data — unnest_pv_data","text":"function converts single data frame subentity-level list columns multiple data frames, one entity/subentity. multiple data frames can merged together using primary key variable specified user (see relational data chapter \"R Data Science\" -depth introduction joining tabular data).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/unnest_pv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest PatentsView data — unnest_pv_data","text":"","code":"unnest_pv_data(data, pk = get_ok_pk(names(data)))"},{"path":"https://docs.ropensci.org/patentsview/reference/unnest_pv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest PatentsView data — unnest_pv_data","text":"data data returned search_pv. first element three-element result object got back search_pv. list length 1, one data frame inside . See examples. pk column/field name link data frames together. unique identifier primary entity. example, used patents endpoint call search_pv, specify pk = \"patent_number\". identifier included fields vector called search_pv. can use get_ok_pk suggest potential primary key data.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/unnest_pv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest PatentsView data — unnest_pv_data","text":"list multiple data frames, one entity/subentity. data frame pk column , can link tables together needed.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/unnest_pv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest PatentsView data — unnest_pv_data","text":"","code":"if (FALSE) {  fields <- c(\"patent_number\", \"patent_title\", \"inventor_city\", \"inventor_country\") res <- search_pv(query = '{\"_gte\":{\"patent_year\":2015}}', fields = fields) unnest_pv_data(data = res$data, pk = \"patent_number\") }"},{"path":"https://docs.ropensci.org/patentsview/reference/with_qfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"With qry_funs — with_qfuns","title":"With qry_funs — with_qfuns","text":"function evaluates whatever code pass environment qry_funs list. allows cut typing writing queries. want cut typing even , can try assigning qry_funs list global environment : list2env(qry_funs, envir = globalenv()).","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/with_qfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"With qry_funs — with_qfuns","text":"","code":"with_qfuns(code, envir = parent.frame())"},{"path":"https://docs.ropensci.org/patentsview/reference/with_qfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"With qry_funs — with_qfuns","text":"code Code evaluate. See example. envir R look objects present code present qry_funs.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/with_qfuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"With qry_funs — with_qfuns","text":"result code - .e., query.","code":""},{"path":"https://docs.ropensci.org/patentsview/reference/with_qfuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"With qry_funs — with_qfuns","text":"","code":"# Without with_qfuns, we have to do: qry_funs$and(   qry_funs$gte(patent_date = \"2007-01-01\"),   qry_funs$text_phrase(patent_abstract = c(\"computer program\")),   qry_funs$or(     qry_funs$eq(inventor_last_name = \"ihaka\"),     qry_funs$eq(inventor_first_name = \"chris\")   ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_or\":[{\"_eq\":{\"inventor_last_name\":\"ihaka\"}},{\"_eq\":{\"inventor_first_name\":\"chris\"}}]}]}  #...With it, this becomes: with_qfuns(  and(    gte(patent_date = \"2007-01-01\"),    text_phrase(patent_abstract = c(\"computer program\")),    or(      eq(inventor_last_name = \"ihaka\"),      eq(inventor_first_name = \"chris\")    )  ) ) #> {\"_and\":[{\"_gte\":{\"patent_date\":\"2007-01-01\"}},{\"_text_phrase\":{\"patent_abstract\":\"computer program\"}},{\"_or\":[{\"_eq\":{\"inventor_last_name\":\"ihaka\"}},{\"_eq\":{\"inventor_first_name\":\"chris\"}}]}]}"},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"patentsview-030-2021-09-03","dir":"Changelog","previous_headings":"","what":"patentsview 0.3.0 (2021-09-03)","title":"patentsview 0.3.0 (2021-09-03)","text":"CRAN release: 2021-09-25","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"misc-0-3-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.3.0 (2021-09-03)","text":"package now using new HTTPS endpoints (#17) list queryable fields updated with_qfuns() now find objects calling environment (@jcheng5, #20) Vignettes pre-computed (#23) issue fixed query strings weren’t properly URL-encoded (#24) Adhoc logic added handle API throttling","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"patentsview-022-2019-01-23","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.2 (2019-01-23)","title":"patentsview 0.2.2 (2019-01-23)","text":"CRAN release: 2019-01-28","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"misc-0-2-2","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.2 (2019-01-23)","text":"Vignettes removed package CRAN builds don’t fail API ","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"patentsview-021-2018-03-05","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.1 (2018-03-05)","title":"patentsview 0.2.1 (2018-03-05)","text":"CRAN release: 2018-03-14","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"misc-0-2-1","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.1 (2018-03-05)","text":"Examples hit API wrapped \\dontrun{} CRAN doesn’t request fixes package API ","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"patentsview-020-2018-02-08","dir":"Changelog","previous_headings":"","what":"patentsview 0.2.0 (2018-02-08)","title":"patentsview 0.2.0 (2018-02-08)","text":"CRAN release: 2018-02-09","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"patentsview 0.2.0 (2018-02-08)","text":"cast_pv_data() function added convert data types data returned search_pv() Additional fields added API (e.g., fields starting forprior_, examiner_)","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"misc-0-2-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"patentsview 0.2.0 (2018-02-08)","text":"Additional error handler added locations endpoint (@mustberuss, #11) error_browser option deprecated","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"patentsview-010-2017-05-01","dir":"Changelog","previous_headings":"","what":"patentsview 0.1.0 (2017-05-01)","title":"patentsview 0.1.0 (2017-05-01)","text":"CRAN release: 2017-07-12","code":""},{"path":"https://docs.ropensci.org/patentsview/news/index.html","id":"new-functions-0-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"patentsview 0.1.0 (2017-05-01)","text":"search_pv added send requests PatentsView API qry_funs list added functions help users write queries get_fields get_endpoints added quickly get possible field names endpoints, respectively unnest_pv_data added unnest data frames returned data","code":""}]
